{"version":3,"sources":["App.js","utils.js","index.js"],"names":["App","useState","undefined","web3","setWeb3","accounts","setAccounts","contract","setContract","admin","setAdmin","shares","setShares","proposals","setProposals","useEffect","a","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","eth","getAccounts","net","getId","networkId","deployedNetwork","DAO","networks","Contract","abi","address","methods","call","init","on","isReady","updateShares","updateProposals","parseInt","nextProposalId","i","all","votes","proposal","hasVoted","push","proposalId","executeProposal","send","from","e","preventDefault","amount","target","elements","value","to","withdraw","contribute","redeemShare","ballotId","vote","name","recipient","createProposal","isFinished","now","Date","getTime","end","className","toLowerCase","onSubmit","withdrawEther","htmlFor","type","id","redeemShares","transferShares","map","onClick","toLocaleString","executed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90ac7fe5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DAO from './contracts/DAO.json';\r\nimport { getWeb3 } from './utils.js';\r\n\r\nfunction App() {\r\n  const [web3, setWeb3] = useState(undefined);\r\n  const [accounts, setAccounts] = useState(undefined);\r\n  const [contract, setContract] = useState(undefined);\r\n  const [admin, setAdmin] = useState(undefined);\r\n  const [shares, setShares] = useState(undefined);\r\n  const [proposals, setProposals] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const web3 = await getWeb3();\r\n      const accounts = await web3.eth.getAccounts();\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = DAO.networks[networkId];\r\n      const contract = new web3.eth.Contract(\r\n        DAO.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      const admin = await contract.methods\r\n        .admin()\r\n        .call();\r\n\r\n      setWeb3(web3);\r\n      setAccounts(accounts);\r\n      setContract(contract);\r\n      setAdmin(admin);\r\n    }\r\n    init();\r\n    window.ethereum.on('accountsChanged', accounts => {\r\n      setAccounts(accounts);\r\n    });\r\n  }, []);\r\n\r\n  const isReady = () => {\r\n    return (\r\n      typeof contract !== 'undefined' \r\n      && typeof web3 !== 'undefined'\r\n      && typeof accounts !== 'undefined'\r\n      && typeof admin !== 'undefined'\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(isReady()) {\r\n      updateShares();\r\n      updateProposals();\r\n    }\r\n  }, [accounts, contract, web3, admin]);\r\n\r\n  async function updateShares() {\r\n    const shares = await contract.methods\r\n      .shares(accounts[0])\r\n      .call();\r\n    setShares(shares);\r\n  }\r\n\r\n  async function updateProposals() {\r\n    const nextProposalId = parseInt(await contract.methods\r\n      .nextProposalId()\r\n      .call());\r\n\r\n    const proposals = [];\r\n    for(let i = 0; i < nextProposalId; i++) { \r\n      const [proposal, hasVoted] = await Promise.all([\r\n        contract.methods.proposals(i).call(),\r\n        contract.methods.votes(accounts[0], i).call()\r\n      ]);\r\n      proposals.push({...proposal, hasVoted});\r\n    }\r\n    setProposals(proposals);\r\n  }\r\n\r\n  async function executeProposal(proposalId) {\r\n    await contract.methods\r\n      .executeProposal(proposalId)\r\n      .send({from: accounts[0]});\r\n    await updateProposals();\r\n  };\r\n\r\n  async function withdrawEther(e) {\r\n    e.preventDefault();\r\n    const amount = e.target.elements[0].value;\r\n    const to = e.target.elements[1].value;\r\n    await contract.methods\r\n      .withdraw(amount, to)\r\n      .send({from: accounts[0]});\r\n  };\r\n\r\n  async function contribute(e) {\r\n    e.preventDefault();\r\n    const amount = e.target.elements[0].value;\r\n    await contract.methods\r\n      .contribute()\r\n      .send({from: accounts[0], value: amount});\r\n    await updateShares();\r\n  };\r\n\r\n  async function redeemShares(e) {\r\n    e.preventDefault();\r\n    const amount = e.target.elements[0].value;\r\n    await contract.methods\r\n      .redeemShare(amount)\r\n      .send({from: accounts[0]});\r\n    await updateShares();\r\n  };\r\n\r\n  async function transferShares(e) {\r\n    e.preventDefault();\r\n    const amount = e.target.elements[0].value;\r\n    await contract.methods\r\n      .redeemShare(amount)\r\n      .send({from: accounts[0]});\r\n    await updateShares();\r\n  };\r\n\r\n  async function vote(ballotId) {\r\n    await contract.methods\r\n      .vote(ballotId)\r\n      .send({from: accounts[0]});\r\n    await updateProposals();\r\n  };\r\n\r\n  async function createProposal(e) {\r\n    e.preventDefault();\r\n    const name = e.target.elements[0].value;\r\n    const amount = e.target.elements[1].value;\r\n    const recipient = e.target.elements[2].value;\r\n    await contract.methods\r\n      .createProposal(name, amount, recipient)\r\n      .send({from: accounts[0]});\r\n    await updateProposals();\r\n  };\r\n\r\n  function isFinished(proposal) {\r\n    const now = new Date().getTime();\r\n    const proposalEnd =  new Date(parseInt(proposal.end) * 1000);\r\n    return (proposalEnd > now) > 0 ? false : true;\r\n  }\r\n\r\n  if (!isReady()) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"text-center\">DAO</h1>\r\n\r\n      <p>Shares: {shares}</p>\r\n\r\n      {accounts[0].toLowerCase() === admin.toLowerCase() ? (\r\n        <>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12\">\r\n            <h2>Withdraw ether</h2>\r\n            <form onSubmit={e => withdrawEther(e)}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"amount\">Amount</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"amount\" />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"to\">To</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"to\" />\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n       <hr />\r\n       </>\r\n      ) : null}\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h2>Contribute</h2>\r\n          <form onSubmit={e => contribute(e)}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"amount\">Amount</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"amount\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h2>Redeem shares</h2>\r\n          <form onSubmit={e => redeemShares(e)}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"amount\">Amount</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"amount\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h2>Transfer shares</h2>\r\n          <form onSubmit={e => transferShares(e)}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"amount\">Amount</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"amount\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h2>Create proposal</h2>\r\n          <form onSubmit={e => createProposal(e)}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"name\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"amount\">Amount</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"amount\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"recipient\">Recipient</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"recipient\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h2>Proposals</h2>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Id</th>\r\n                <th>Name</th>\r\n                <th>Amount</th>\r\n                <th>Recipient</th>\r\n                <th>Votes</th>\r\n                <th>Vote</th>\r\n                <th>Ends on</th>\r\n                <th>Executed</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {proposals.map(proposal => (\r\n                <tr key={proposal.id}>\r\n                  <td>{proposal.id}</td>\r\n                  <td>{proposal.name}</td>\r\n                  <td>{proposal.amount}</td>\r\n                  <td>{proposal.recipient}</td>\r\n                  <td>{proposal.votes}</td>\r\n                  <td>\r\n                    {isFinished(proposal) ? 'Vote finished' : (\r\n                      proposal.hasVoted ? 'You already voted' : ( \r\n                      <button \r\n                        onClick={e => vote(proposal.id)}\r\n                        type=\"submit\" \r\n                        className=\"btn btn-primary\">\r\n                        Vote\r\n                      </button>\r\n                    ))}\r\n                  </td>\r\n                  <td>\r\n                    {(new Date(parseInt(proposal.end) * 1000)).toLocaleString()}\r\n                  </td>\r\n                  <td>\r\n                    {proposal.executed ? 'Yes' : (\r\n                      admin.toLowerCase() === accounts[0].toLowerCase() ? (\r\n                        <button \r\n                          onClick={e => executeProposal(proposal.id)}\r\n                          type=\"submit\" \r\n                          className=\"btn btn-primary\">\r\n                          Execute\r\n                        </button>\r\n                      ) : 'No' \r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () => {\r\n  return new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://localhost:9545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport { getWeb3 };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootstrap.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}